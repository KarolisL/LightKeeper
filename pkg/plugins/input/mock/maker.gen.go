// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KarolisL/lightkeeper/pkg/plugins/input (interfaces: Maker)

// Package mock_input is a generated GoMock package.
package mock_input

import (
	config "github.com/KarolisL/lightkeeper/pkg/daemon/config"
	input "github.com/KarolisL/lightkeeper/pkg/plugins/input"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMaker is a mock of Maker interface
type MockMaker struct {
	ctrl     *gomock.Controller
	recorder *MockMakerMockRecorder
}

// MockMakerMockRecorder is the mock recorder for MockMaker
type MockMakerMockRecorder struct {
	mock *MockMaker
}

// NewMockMaker creates a new mock instance
func NewMockMaker(ctrl *gomock.Controller) *MockMaker {
	mock := &MockMaker{ctrl: ctrl}
	mock.recorder = &MockMakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMaker) EXPECT() *MockMakerMockRecorder {
	return m.recorder
}

// NewFanOutInput mocks base method
func (m *MockMaker) NewFanOutInput(arg0 string, arg1 config.Params) (input.FanoutInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFanOutInput", arg0, arg1)
	ret0, _ := ret[0].(input.FanoutInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFanOutInput indicates an expected call of NewFanOutInput
func (mr *MockMakerMockRecorder) NewFanOutInput(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFanOutInput", reflect.TypeOf((*MockMaker)(nil).NewFanOutInput), arg0, arg1)
}

// NewInput mocks base method
func (m *MockMaker) NewInput(arg0 string, arg1 config.Params) (input.Input, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewInput", arg0, arg1)
	ret0, _ := ret[0].(input.Input)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewInput indicates an expected call of NewInput
func (mr *MockMakerMockRecorder) NewInput(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewInput", reflect.TypeOf((*MockMaker)(nil).NewInput), arg0, arg1)
}
