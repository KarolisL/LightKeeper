// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KarolisL/lightkeeper/pkg/plugins/output (interfaces: Maker)

// Package mock_output is a generated GoMock package.
package mock_output

import (
	config "github.com/KarolisL/lightkeeper/pkg/daemon/config"
	output "github.com/KarolisL/lightkeeper/pkg/plugins/output"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMaker is a mock of Maker interface
type MockMaker struct {
	ctrl     *gomock.Controller
	recorder *MockMakerMockRecorder
}

// MockMakerMockRecorder is the mock recorder for MockMaker
type MockMakerMockRecorder struct {
	mock *MockMaker
}

// NewMockMaker creates a new mock instance
func NewMockMaker(ctrl *gomock.Controller) *MockMaker {
	mock := &MockMaker{ctrl: ctrl}
	mock.recorder = &MockMakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMaker) EXPECT() *MockMakerMockRecorder {
	return m.recorder
}

// NewOutput mocks base method
func (m *MockMaker) NewOutput(arg0 string, arg1 config.Params) (output.Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOutput", arg0, arg1)
	ret0, _ := ret[0].(output.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewOutput indicates an expected call of NewOutput
func (mr *MockMakerMockRecorder) NewOutput(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOutput", reflect.TypeOf((*MockMaker)(nil).NewOutput), arg0, arg1)
}
